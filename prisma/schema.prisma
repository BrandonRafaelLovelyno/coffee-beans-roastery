// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RoastLevel {
  Light
  Medium
  Dark
}

enum BeanType {
  Arabica
  Robusta
}

enum Method {
  Washed
  Natural
  Honey
}

enum Flavor {
  Fruity
  Spicy
  Nutty
  Chocolatey
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  isGoogle      Boolean @default(true)
  accounts      Account[]
  sessions      Session[]
}
model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Profile{
  id String @db.ObjectId @id @map("_id") @default(auto())
  userId String @db.ObjectId @unique
  username String?
  name String @unique
  email String @unique
  phone String? @unique
  hashedPassword String? 
  address String?
  favCoffee String[] @db.ObjectId 
  imageUrl String?
  comment Comment[]
  orders Order[]
}

model Coffee{
  id String @db.ObjectId @id @map("_id") @default(auto())
  name String @unique
  origin String
  roastLevel RoastLevel
  beanType BeanType
  method Method
  flavor Flavor
  desc String
  cupImageUrl String
  packImageUrl String
  stock Int 
  price Float
}

model Order{
  id String @db.ObjectId @id @map("_id") @default(auto())
  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId],references: [id],onDelete:Cascade)
  hasPaid Boolean
  progress Float
  coffeeId String @db.ObjectId
  sum Int
}

model Comment{
  id String @id @map("_id") @db.ObjectId @default(auto())
  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId],references: [id],onDelete:Cascade)
  text String
  likedBy String[] @db.ObjectId
}